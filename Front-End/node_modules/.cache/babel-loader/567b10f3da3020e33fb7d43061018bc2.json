{"ast":null,"code":"var _jsxFileName = \"/home/issam/Desktop/Projet React/try/src/TestPost.js\";\nimport React, { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass TestPost extends Component {\n  constructor() {\n    super();\n    this.state = {\n      users: []\n    };\n    this.getUsers = this.getUsers.bind(this);\n  }\n\n  componentDidMount() {\n    this.getUsers();\n  }\n\n  async getUsers() {\n    let body = {\n      id: 12,\n      question: \"haha\",\n      reponse: \"hehe\"\n    }; // With additional headers\n\n    const response = await fetch(\"http://localhost:8080/Web-Project/project/SetQuestion\", {\n      method: \"POST\",\n      // *Type of request GET, POST, PUT, DELETE\n      mode: \"cors\",\n      // Type of mode of the request\n      cache: \"no-cache\",\n      // options like default, no-cache, reload, force-cache\n      credentials: \"same-origin\",\n      // options like include, *same-origin, omit\n      headers: {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\" // request content type\n\n      },\n      redirect: \"follow\",\n      // manual, *follow, error\n      referrerPolicy: \"no-referrer\",\n      body: JSON.stringify(body) // no-referrer, *client\n      // body: JSON.stringify(data) // Attach body with the request\n\n    });\n    this.setState({\n      users: await response.json()\n    });\n  }\n\n  render() {\n    const {\n      users\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Using Fetch in React for API call\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), users && users.map((user, index) => {\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          children: user.name\n        }, user.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 20\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default TestPost;","map":{"version":3,"sources":["/home/issam/Desktop/Projet React/try/src/TestPost.js"],"names":["React","Component","TestPost","constructor","state","users","getUsers","bind","componentDidMount","body","id","question","reponse","response","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","JSON","stringify","setState","json","render","map","user","index","name"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;AAEA,MAAMC,QAAN,SAAuBD,SAAvB,CAAiC;AAC/BE,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,KAAL,GAAa;AAACC,MAAAA,KAAK,EAAE;AAAR,KAAb;AACA,SAAKC,QAAL,GAAgB,KAAKA,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAAhB;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKF,QAAL;AACD;;AAEa,QAARA,QAAQ,GAAG;AACf,QAAIG,IAAI,GAAG;AACPC,MAAAA,EAAE,EAAE,EADG;AAEPC,MAAAA,QAAQ,EAAE,MAFH;AAGPC,MAAAA,OAAO,EAAE;AAHF,KAAX,CADe,CAMf;;AACA,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,uDAAD,EAA0D;AACpFC,MAAAA,MAAM,EAAE,MAD4E;AACpE;AAChBC,MAAAA,IAAI,EAAE,MAF8E;AAEtE;AACdC,MAAAA,KAAK,EAAE,UAH6E;AAGjE;AACnBC,MAAAA,WAAW,EAAE,aAJuE;AAIxD;AAC5BC,MAAAA,OAAO,EAAE;AACP,kBAAU,kBADH;AAEP,wBAAgB,kBAFT,CAE4B;;AAF5B,OAL2E;AASpFC,MAAAA,QAAQ,EAAE,QAT0E;AAShE;AACpBC,MAAAA,cAAc,EAAE,aAVoE;AAWpFZ,MAAAA,IAAI,EAAEa,IAAI,CAACC,SAAL,CAAed,IAAf,CAX8E,CAWzD;AAC3B;;AAZoF,KAA1D,CAA5B;AAcA,SAAKe,QAAL,CAAc;AAAEnB,MAAAA,KAAK,EAAE,MAAMQ,QAAQ,CAACY,IAAT;AAAf,KAAd;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAErB,MAAAA;AAAF,QAAY,KAAKD,KAAvB;AACA,wBACE;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA;AAAA;AAAA;AAAA,cAFF,EAGGC,KAAK,IACJA,KAAK,CAACsB,GAAN,CAAU,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACzB,4BAAO;AAAA,oBAAkBD,IAAI,CAACE;AAAvB,WAAQF,IAAI,CAAClB,EAAb;AAAA;AAAA;AAAA;AAAA,gBAAP;AACD,OAFD,CAJJ,eAOE;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAWD;;AAhD8B;;AAmDjC,eAAeR,QAAf","sourcesContent":["import React, { Component } from \"react\";\n\nclass TestPost extends Component {\n  constructor() {\n    super();\n    this.state = {users: []};\n    this.getUsers = this.getUsers.bind(this);\n  }\n\n  componentDidMount() {\n    this.getUsers();\n  }\n\n  async getUsers() {\n    let body = {\n        id: 12,\n        question: \"haha\",\n        reponse: \"hehe\"\n      };\n    // With additional headers\n    const response = await fetch(\"http://localhost:8080/Web-Project/project/SetQuestion\", {\n      method: \"POST\", // *Type of request GET, POST, PUT, DELETE\n      mode: \"cors\", // Type of mode of the request\n      cache: \"no-cache\", // options like default, no-cache, reload, force-cache\n      credentials: \"same-origin\", // options like include, *same-origin, omit\n      headers: {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\" // request content type\n      },\n      redirect: \"follow\", // manual, *follow, error\n      referrerPolicy: \"no-referrer\",\n      body: JSON.stringify(body) // no-referrer, *client\n      // body: JSON.stringify(data) // Attach body with the request\n    });\n    this.setState({ users: await response.json() });\n  }\n\n  render() {\n    const { users } = this.state;\n    return (\n      <div>\n        <h3>Using Fetch in React for API call</h3>\n        <hr />\n        {users &&\n          users.map((user, index) => {\n            return <p key={user.id}>{user.name}</p>;\n          })}\n        <div />\n      </div>\n    );\n  }\n}\n\nexport default TestPost;"]},"metadata":{},"sourceType":"module"}